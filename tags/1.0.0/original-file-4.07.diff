--- /usr/src/redhat/BUILD/file-4.07/src/file.c	2003-12-24 02:32:41.000000000 +0900
+++ ./file.c	2004-08-20 22:19:43.000000000 +0900
@@ -69,12 +69,25 @@
 
 #include <netinet/in.h>		/* for byte swapping */
 
-#include "patchlevel.h"
-
 #ifndef	lint
 FILE_RCSID("@(#)$Id: original-file-4.07.diff,v 1.1 2004-08-20 13:53:42 oops Exp $")
 #endif	/* lint */
 
+/* for PHP */
+#include "php.h"
+#include "SAPI.h"
+
+#define OB_DEFAULT_HANDLER_NAME "default output handler"
+
+#ifdef stderr
+#undef stderr
+#endif
+
+#define printf php_printf
+#define fprintf php_error
+#define stderr E_WARNING
+/* for PHP */
+
 
 #ifdef S_IFLNK
 #define SYMLINKFLAG "L"
@@ -82,30 +95,23 @@
 #define SYMLINKFLAG ""
 #endif
 
-# define USAGE  "Usage: %s [-bcik" SYMLINKFLAG "nNsvz] [-f namefile] [-F separator] [-m magicfiles] file...\n       %s -C -m magicfiles\n"
-
 #ifndef MAXPATHLEN
 #define	MAXPATHLEN	512
 #endif
 
-private int 		/* Global command-line options 		*/
-	bflag = 0,	/* brief output format	 		*/
-	nopad = 0,	/* Don't pad output			*/
-	nobuffer = 0;   /* Do not buffer stdout 		*/
+private int 		/* Global command-line options */
+	bflag = 0,		/* brief output format */
+	nopad = 0,		/* Don't pad output */
+	nobuffer = 0;	/* Do not buffer stdout */
 
-private const char *magicfile = 0;	/* where the magic is	*/
+private const char *magicfile = 0;	/* where the magic is */
 private const char *default_magicfile = MAGIC;
-private char *separator = ":";	/* Default field separator	*/
-
-private char *progname;		/* used throughout 		*/
+private char *separator = ":";	/* Default field separator */
 
 private struct magic_set *magic;
 
-private void unwrap(char *);
-private void usage(void);
-#ifdef HAVE_GETOPT_H
-private void help(void);
-#endif
+private int unwrap(char *);
+private void usage(char c, char *s);
 #if 0
 private int byteconv4(int, int, int);
 private short byteconv2(int, int, int);
@@ -113,27 +119,25 @@
 
 int main(int, char *[]);
 private void process(const char *, int);
-private void load(const char *, int);
+private int load(const char *, int);
 
 
 /*
  * main - parse arguments and handle options
  */
 int
-main(int argc, char *argv[])
+file_main(int argc, char *argv[])
 {
 	int c;
 	int action = 0, didsomefiles = 0, errflg = 0;
 	int flags = 0;
 	char *home, *usermagic;
 	struct stat sb;
-#define OPTSTRING	"bcCdf:F:ikLm:nNprsvz"
+#define OPTSTRING	"bcCdf:F:ikLm:nNprsz"
 #ifdef HAVE_GETOPT_LONG
 	int longindex;
 	private struct option long_options[] =
 	{
-		{"version", 0, 0, 'v'},
-		{"help", 0, 0, 0},
 		{"brief", 0, 0, 'b'},
 		{"checking-printout", 0, 0, 'c'},
 		{"debug", 0, 0, 'd'},
@@ -167,11 +171,6 @@
 	_wildcard(&argc, &argv);
 #endif
 
-	if ((progname = strrchr(argv[0], '/')) != NULL)
-		progname++;
-	else
-		progname = argv[0];
-
 	magicfile = default_magicfile;
 	if ((usermagic = getenv("MAGIC")) != NULL)
 		magicfile = usermagic;
@@ -190,14 +189,15 @@
 #ifndef HAVE_GETOPT_LONG
 	while ((c = getopt(argc, argv, OPTSTRING)) != -1)
 #else
-	while ((c = getopt_long(argc, argv, OPTSTRING, long_options,
-	    &longindex)) != -1)
+	while ((c = getopt_long(argc, argv, OPTSTRING, long_options, &longindex)) != -1)
 #endif
 		switch (c) {
 #ifdef HAVE_GETOPT_LONG
 		case 0 :
-			if (longindex == 1)
-				help();
+			if (longindex == 1) {
+				usage(c, "");
+				return 1;
+			}
 			break;
 #endif
 		case 'b':
@@ -213,10 +213,16 @@
 			flags |= MAGIC_DEBUG|MAGIC_CHECK;
 			break;
 		case 'f':
-			if(action)
-				usage();
-			load(magicfile, flags);
-			unwrap(optarg);
+			if(action) {
+				usage(c, "");
+				return 1;
+			}
+			if ( load(magicfile, flags) != 0 ) {
+				return 1;
+			}
+			if ( unwrap(optarg) != 0 )
+				return 1;
+
 			++didsomefiles;
 			break;
 		case 'F':
@@ -248,12 +254,6 @@
 		case 's':
 			flags |= MAGIC_DEVICES;
 			break;
-		case 'v':
-			(void) fprintf(stdout, "%s-%d.%.2d\n", progname,
-				       FILE_VERSION_MAJOR, patchlevel);
-			(void) fprintf(stdout, "magic file from %s\n",
-				       magicfile);
-			return 1;
 		case 'z':
 			flags |= MAGIC_COMPRESS;
 			break;
@@ -264,39 +264,36 @@
 #endif
 		case '?':
 		default:
-			errflg++;
+			usage (c, "");
+			return 1;
 			break;
 		}
 
-	if (errflg) {
-		usage();
-	}
-
 	switch(action) {
-	case FILE_CHECK:
-	case FILE_COMPILE:
-		magic = magic_open(flags|MAGIC_CHECK);
-		if (magic == NULL) {
-			(void)fprintf(stderr, "%s: %s\n", progname,
-			    strerror(errno));
-			return 1;
-		}
-		c = action == FILE_CHECK ? magic_check(magic, magicfile) :
-		    magic_compile(magic, magicfile);
-		if (c == -1) {
-			(void)fprintf(stderr, "%s: %s\n", progname,
-			    magic_error(magic));
-			return -1;
-		}
-		return 0;
-	default:
-		load(magicfile, flags);
-		break;
+		case FILE_CHECK:
+		case FILE_COMPILE:
+			magic = magic_open(flags|MAGIC_CHECK);
+			if (magic == NULL) {
+				(void)fprintf(stderr, "%s\n", strerror(errno));
+				return 1;
+			}
+			c = action == FILE_CHECK ? magic_check(magic, magicfile) : magic_compile(magic, magicfile);
+			if (c == -1) {
+				(void)fprintf(stderr, "%s\n", magic_error(magic));
+				return -1;
+			}
+			return 0;
+		default:
+			if ( load(magicfile, flags) != 0 )
+				return 1;
+	
+			break;
 	}
 
 	if (optind == argc) {
 		if (!didsomefiles) {
-			usage();
+			usage(0, "Must existed file for checking");
+			return 1;
 		}
 	}
 	else {
@@ -306,35 +303,37 @@
 			if (nw > wid)
 				wid = nw;
 		}
-		for (; optind < argc; optind++)
+		for (; optind < argc; optind++) {
 			process(argv[optind], wid);
+		}
 	}
 
 	return 0;
 }
 
 
-private void
+private int
 load(const char *m, int flags)
 {
 	if (magic)
-		return;
+		return 0;
 	magic = magic_open(flags);
 	if (magic == NULL) {
-		(void)fprintf(stderr, "%s: %s\n", progname, strerror(errno));
-		exit(1);
+		(void)fprintf(stderr, "%s\n", strerror(errno));
+		return 1;
 	}
 	if (magic_load(magic, magicfile) == -1) {
-		(void)fprintf(stderr, "%s: %s\n",
-		    progname, magic_error(magic));
-		exit(1);
+		(void)fprintf(stderr, "%s\n", magic_error(magic));
+		return 1;
 	}
+
+	return 0;
 }
 
 /*
  * unwrap -- read a file of filenames, do each one.
  */
-private void
+private int
 unwrap(char *fn)
 {
 	char buf[MAXPATHLEN];
@@ -346,9 +345,8 @@
 		wid = 1;
 	} else {
 		if ((f = fopen(fn, "r")) == NULL) {
-			(void)fprintf(stderr, "%s: Cannot open `%s' (%s).\n",
-			    progname, fn, strerror(errno));
-			exit(1);
+			(void)fprintf(stderr, "Cannot open `%s' (%s).\n", fn, strerror(errno));
+			return 1;
 		}
 
 		while (fgets(buf, MAXPATHLEN, f) != NULL) {
@@ -368,6 +366,8 @@
 	}
 
 	(void) fclose(f);
+
+	return 0;
 }
 
 private void
@@ -378,7 +378,7 @@
 
 	if (wid > 0 && !bflag)
 		(void) printf("%s%s%*s ", std_in ? "/dev/stdin" : inname,
-		    separator, (int) (nopad ? 0 : (wid - strlen(inname))), "");
+					  separator, (int) (nopad ? 0 : (wid - strlen(inname))), "");
 
 	type = magic_file(magic, std_in ? NULL : inname);
 	if (type == NULL)
@@ -446,44 +446,19 @@
 #endif
 
 private void
-usage(void)
+usage(char c, char * s)
 {
-	(void)fprintf(stderr, USAGE, progname, progname);
-#ifdef HAVE_GETOPT_H
-	(void)fputs("Try `file --help' for more information.\n", stderr);
-#endif
-	exit(1);
+	if ( c != 0 )
+		fprintf(stderr, "-%c is unsupported option\n", c);
+	else
+		fprintf(stderr, "%s\n", s);
 }
 
-#ifdef HAVE_GETOPT_H
-private void
-help(void)
-{
-	puts(
-"Usage: file [OPTION]... [FILE]...\n"
-"Determine file type of FILEs.\n"
-"\n"
-"  -m, --magic-file LIST      use LIST as a colon-separated list of magic\n"
-"                               number files\n"
-"  -z, --uncompress           try to look inside compressed files\n"
-"  -b, --brief                do not prepend filenames to output lines\n"
-"  -c, --checking-printout    print the parsed form of the magic file, use in\n"
-"                               conjunction with -m to debug a new magic file\n"
-"                               before installing it\n"
-"  -f, --files-from FILE      read the filenames to be examined from FILE\n"
-"  -F, --separator string     use string as separator instead of `:'\n"
-"  -i, --mime                 output mime type strings\n"
-"  -k, --keep-going           don't stop at the first match\n"
-"  -L, --dereference          causes symlinks to be followed\n"
-"  -n, --no-buffer            do not buffer output\n"
-"  -N, --no-pad               do not pad output\n"
-"  -p, --preserve-date        preserve access times on files\n"
-"  -r, --raw                  don't translate unprintable chars to \\ooo\n"
-"  -s, --special-files        treat special (block/char devices) files as\n"
-"                             ordinary ones\n"
-"      --help                 display this help and exit\n"
-"      --version              output version information and exit\n"
-);
-	exit(0);
-}
-#endif
+/*
+ * Local variables:
+ * tab-width: 4
+ * c-basic-offset: 4
+ * End:
+ * vim600: noet sw=4 ts=4 fdm=marker
+ * vim<600: noet sw=4 ts=4
+ */
